{"version":3,"sources":["composition/Components/Card.js","composition/Components/List.js","STORE.js","composition/Components/App.js","index.js"],"names":["Card","props","className","title","onClick","onClickDelete","id","type","content","List","header","cards","map","card","onClickAdd","defaultProps","STORE","lists","cardIds","allCards","a","b","c","d","e","f","g","h","i","j","k","l","m","newRandomCard","Math","random","toString","substring","omit","obj","keyToOmit","Object","entries","reduce","newObj","key","value","App","state","store","handleDeleteCard","cardId","newLists","list","filter","newCards","console","log","setState","handleAddCard","listId","newCard","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ea6d90a3.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../Styles/Card.css\";\n\n// create a function component called Card\n// define className prop\n// pass in props.title and props.content into function component\n\nexport default function Card(props) {\n  return (\n    <div className=\"Card\">\n      <h3>{props.title}</h3>\n      {/* Use the id of the props that are passed in to access the individual card and pass it back up the component tree using a callback prop function */}\n      <button onClick={() => props.onClickDelete(props.id)} type=\"button\">\n        delete\n      </button>\n      <p>{props.content}</p>\n    </div>\n  );\n}\n\n// WHAT EXACTLY DOES THIS LINE DO?????\nCard.propTypes = {\n  onClickDelete: () => {},\n};\n","import React from \"react\";\nimport Card from \"./Card\";\nimport \"../Styles/List.css\";\n\n// props are passed in from the App component\nexport default function List(props) {\n  return (\n    <section className=\"List\">\n      <header className=\"List-header\">\n        <h2>{props.header}</h2>\n      </header>\n      <div className=\"List-cards\">\n        {props.cards.map((card) => (\n          <Card\n            key={card.id}\n            id={card.id}\n            title={card.title}\n            content={card.content}\n            onClickDelete={props.onClickDelete}\n            //pass in onClickDelete callback prop so it gets passed back up to the App component\n          />\n        ))}\n        <button\n          className=\"add-button\"\n          type=\"button\"\n          onClick={() => props.onClickAdd(props.id)}\n        >\n          Add Random Card +\n        </button>\n      </div>\n    </section>\n  );\n}\n\nList.defaultProps = {\n  onClickAdd: () => {},\n};\n","const STORE = {\n  lists: [\n    {\n      id: \"1\",\n      header: \"First list\",\n      cardIds: [\"a\", \"b\", \"e\", \"f\", \"g\", \"j\", \"l\", \"m\"],\n    },\n    {\n      id: \"2\",\n      header: \"Second list\",\n      cardIds: [\"b\", \"c\", \"d\", \"f\", \"h\", \"i\", \"k\"],\n    },\n    {\n      id: \"3\",\n      header: \"Third list\",\n      cardIds: [\n        \"a\",\n        \"b\",\n        \"c\",\n        \"d\",\n        \"e\",\n        \"f\",\n        \"g\",\n        \"h\",\n        \"i\",\n        \"j\",\n        \"k\",\n        \"l\",\n        \"m\",\n      ],\n    },\n    {\n      id: \"4\",\n      header: \"Fourth list\",\n      cardIds: [\"l\", \"m\"],\n    },\n  ],\n  allCards: {\n    a: { id: \"a\", title: \"First card\", content: \"lorem ipsum\" },\n    b: { id: \"b\", title: \"Second card\", content: \"lorem ipsum\" },\n    c: { id: \"c\", title: \"Third card\", content: \"lorem ipsum\" },\n    d: { id: \"d\", title: \"Fourth card\", content: \"lorem ipsum\" },\n    e: { id: \"e\", title: \"Fifth card\", content: \"lorem ipsum\" },\n    f: { id: \"f\", title: \"Sixth card\", content: \"lorem ipsum\" },\n    g: { id: \"g\", title: \"Seventh card\", content: \"lorem ipsum\" },\n    h: { id: \"h\", title: \"Eighth card\", content: \"lorem ipsum\" },\n    i: { id: \"i\", title: \"Ninth card\", content: \"lorem ipsum\" },\n    j: { id: \"j\", title: \"Tenth card\", content: \"lorem ipsum\" },\n    k: { id: \"k\", title: \"Eleventh card\", content: \"lorem ipsum\" },\n    l: { id: \"l\", title: \"Twelfth card\", content: \"lorem ipsum\" },\n    m: { id: \"m\", title: \"Thirteenth card\", content: \"lorem ipsum\" },\n  },\n};\n\nexport default STORE;\n","import React from \"react\";\nimport \"../Styles/App.css\";\nimport List from \"./List\";\nimport STORE from \"../../STORE\";\n\nconst newRandomCard = () => {\n  const id =\n    Math.random().toString(36).substring(2, 4) +\n    Math.random().toString(36).substring(2, 4);\n  return {\n    id,\n    title: `Random Card ${id}`,\n    content: \"lorem ipsum\",\n  };\n};\n\nfunction omit(obj, keyToOmit) {\n  return Object.entries(obj).reduce(\n    (newObj, [key, value]) =>\n      key === keyToOmit ? newObj : { ...newObj, [key]: value },\n    {}\n  );\n}\n\n// this component will contain the state for the application because it is the lowest common ancestor that can read and update state\nclass App extends React.Component {\n  //initialize state for App component using test data\n  state = {\n    store: STORE,\n  };\n\n  // DON'T FORGET TO USE ARROW FUNCTIONS SO WE AVOID UNDEFINED ERRORS\n  // this function will handle the delete callback prop\n  handleDeleteCard = (cardId) => {\n    const { lists, allCards } = this.state.store;\n\n    // create a new array of the list using a map array method\n    const newLists = lists.map((list) => ({\n      ...list,\n      cardIds: list.cardIds.filter((id) => id !== cardId),\n    }));\n\n    // create a new array of the cards minus the deleted card using the omit function\n    const newCards = omit(allCards, cardId);\n\n    console.log(\"delete clicked\");\n    this.setState({\n      store: {\n        lists: newLists,\n        allCards: newCards,\n      },\n    });\n  };\n\n  // this function will handle the add callback prop\n  handleAddCard = (listId) => {\n    // create a new card using the provided newRandomCard()\n    const newCard = newRandomCard();\n\n    // i'm unsure exactly what this code here is doing\n    const newLists = this.state.store.lists.map((list) => {\n      if (list.id === listId) {\n        return {\n          ...list,\n          cardIds: [...list.cardIds, newCard.id],\n        };\n      }\n      return list;\n    });\n\n    this.setState({\n      store: {\n        lists: newLists,\n        allCards: {\n          ...this.state.store.allCards,\n          [newCard.id]: newCard,\n        },\n      },\n    });\n  };\n\n  render() {\n    // use object destructuing to access the current state\n    const { store } = this.state;\n\n    return (\n      <main className=\"App\">\n        <header className=\"App-header\">\n          <h1>Trelloyes!</h1>\n        </header>\n        <div className=\"App-list\">\n          {store.lists.map((list) => (\n            <List\n              key={list.id}\n              id={list.id}\n              header={list.header}\n              cards={list.cardIds.map((id) => store.allCards[id])}\n              onClickDelete={this.handleDeleteCard}\n              onClickAdd={this.handleAddCard}\n            />\n          ))}\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../src/composition/Components/App\";\nimport \"../src/composition/Styles/index.css\";\nimport STORE from \"./STORE\";\n\nReactDOM.render(<App STORE={STORE} />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}